// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Safeway.DataAccess;

namespace Safeway.DataAccess.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200429053644_updateentregularcheckelement")]
    partial class updateentregularcheckelement
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Safeway.Model.Enterprise.EnterpriseBasicInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("ComapanyName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("CompanyScale")
                        .HasMaxLength(150);

                    b.Property<string>("CompanyType")
                        .HasMaxLength(30);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("District")
                        .HasMaxLength(200);

                    b.Property<string>("ForeignCountry")
                        .HasMaxLength(100);

                    b.Property<string>("Industry")
                        .HasMaxLength(100);

                    b.Property<string>("LegalRepresentative")
                        .HasMaxLength(100);

                    b.Property<string>("MainProducts")
                        .HasMaxLength(100);

                    b.Property<string>("NoofEmployees")
                        .HasMaxLength(100);

                    b.Property<string>("Province")
                        .HasMaxLength(50);

                    b.Property<string>("Street")
                        .HasMaxLength(300);

                    b.Property<string>("TermsofTrade")
                        .HasMaxLength(100);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("EnterpriseBasicInfos");
                });

            modelBuilder.Entity("Safeway.Model.Enterprise.EnterpriseBusinessinfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertificateLevel")
                        .HasMaxLength(50);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<Guid>("EnterpriseBasicInfoId");

                    b.Property<DateTime>("ExpireDate");

                    b.Property<string>("OriginalServiceCom")
                        .HasMaxLength(50);

                    b.Property<string>("OtherSafetyServiceType");

                    b.Property<string>("SafetyServiceType");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("EnterpriseBusinessinfos");
                });

            modelBuilder.Entity("Safeway.Model.Enterprise.EnterpriseContact", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Dept")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .HasMaxLength(30);

                    b.Property<Guid>("EnterpriseBasicInfoId");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Tele")
                        .HasMaxLength(30);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("EnterpriseContacts");
                });

            modelBuilder.Entity("Safeway.Model.Enterprise.EnterpriseFinanceInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account")
                        .HasMaxLength(50);

                    b.Property<string>("Bank")
                        .HasMaxLength(50);

                    b.Property<string>("Company_Address")
                        .HasMaxLength(50);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("CustomerReceiptReceiver")
                        .HasMaxLength(50);

                    b.Property<Guid>("EnterpriseBasicId");

                    b.Property<string>("Tele_Number")
                        .HasMaxLength(50);

                    b.Property<string>("UnifiedSocialCreditCode")
                        .HasMaxLength(50);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("EnterpriseFinanceInfos");
                });

            modelBuilder.Entity("Safeway.Model.Enterprise.EnterpriserYearYield", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<DateTime>("Created");

                    b.Property<Guid>("EnterpriseBasicInfoId");

                    b.Property<string>("FiscalYear")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<decimal>("YearYieldValue")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("ID");

                    b.ToTable("EnterpriserYearYields");
                });

            modelBuilder.Entity("Safeway.Model.EnterpriseReview.EntRegularCheckElement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CheckContent")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("CheckPoint")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsValid");

                    b.Property<int>("Order");

                    b.Property<string>("Regulations")
                        .HasMaxLength(500);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("EntRegularCheckElement");
                });

            modelBuilder.Entity("Safeway.Model.EnterpriseReview.EnterpriseReviewElement", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int?>("EvaluationType");

                    b.Property<bool>("IsValid");

                    b.Property<int>("Level");

                    b.Property<int>("Order");

                    b.Property<string>("ParentElementId");

                    b.Property<string>("ScoringMethod")
                        .HasMaxLength(500);

                    b.Property<int>("TotalScore");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("EnterpriseReviewElements");
                });

            modelBuilder.Entity("Safeway.Model.ExportTemplate.EvaluationTeamInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<string>("Position");

                    b.Property<string>("ProjectID");

                    b.Property<string>("SmallEntEvaBaseID");

                    b.Property<string>("Tel");

                    b.HasKey("ID");

                    b.ToTable("EvaluationTeamInfos");
                });

            modelBuilder.Entity("Safeway.Model.ExportTemplate.SmEntEvaluationGeneral", b =>
                {
                    b.Property<Guid>("EnterpriseID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComapanyName");

                    b.Property<string>("ContactEmail");

                    b.Property<string>("ContactFax");

                    b.Property<string>("ContactMobile");

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactTel");

                    b.Property<DateTime>("EvaluationEndDate");

                    b.Property<string>("EvaluationLeader");

                    b.Property<DateTime>("EvaluationStartDate");

                    b.Property<string>("EvaluationTeamMember");

                    b.Property<string>("Industry");

                    b.Property<string>("LegalRepMobile");

                    b.Property<string>("LegalRepTel");

                    b.Property<string>("LegalRepresentative");

                    b.HasKey("EnterpriseID");

                    b.ToTable("SmEntEvaluationGenerals");
                });

            modelBuilder.Entity("Safeway.Model.ExportTemplate.SmEntEvaluationTemplate", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualScore");

                    b.Property<string>("ComplianceStandard");

                    b.Property<decimal>("Deduction");

                    b.Property<Guid>("LevelFourID");

                    b.Property<string>("LevelOneElement");

                    b.Property<string>("LevelTwoElement");

                    b.Property<string>("ScoringMethod");

                    b.Property<decimal>("StandardScore");

                    b.Property<bool>("UnInvolved");

                    b.Property<string>("UnMatchedItemDescription");

                    b.HasKey("ID");

                    b.ToTable("SmEntEvaluationTemplates");
                });

            modelBuilder.Entity("Safeway.Model.NormalEntEvaluation.NormalEntEvaluationBase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<Guid>("EnterpriseId");

                    b.Property<DateTime>("EvaluationEndDate");

                    b.Property<string>("EvaluationLeader")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EvaluationStartDate");

                    b.Property<string>("EvaluationTeamMember")
                        .HasMaxLength(500);

                    b.Property<string>("EvluationEnt")
                        .HasMaxLength(300);

                    b.Property<bool>("IsValid");

                    b.Property<string>("ModuleOne")
                        .HasMaxLength(200);

                    b.Property<string>("ModuleThree")
                        .HasMaxLength(200);

                    b.Property<string>("ModuleTwo")
                        .HasMaxLength(200);

                    b.Property<string>("ReportLeader")
                        .HasMaxLength(200);

                    b.Property<int>("Status");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("NormalEntEvaluationBases");
                });

            modelBuilder.Entity("Safeway.Model.NormalEntEvaluation.NormalEntEvaluationItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualScore")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("AssignTo")
                        .HasMaxLength(200);

                    b.Property<string>("BasicRuleRequirement")
                        .HasMaxLength(500);

                    b.Property<string>("ComplianceStandard")
                        .HasMaxLength(500);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("EvaluationDescription");

                    b.Property<int?>("EvaluationType");

                    b.Property<Guid>("LevelFourID");

                    b.Property<string>("LevelOneElement")
                        .HasMaxLength(300);

                    b.Property<string>("LevelThreeElement")
                        .HasMaxLength(300);

                    b.Property<string>("LevelTwoElement")
                        .HasMaxLength(300);

                    b.Property<string>("NormalEntEvaluationBaseId");

                    b.Property<decimal>("StandardScore")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("UnInvolved");

                    b.Property<bool>("UnMatched");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("NormalEntEvaluationItems");
                });

            modelBuilder.Entity("Safeway.Model.NormalEntEvaluation.NormalEntEvaluationUnmatchedItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<decimal>("Deduction")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal>("DeductionReference")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("NormalEntEvaluationBaseId");

                    b.Property<string>("SmallEntEvaluationItemId");

                    b.Property<string>("UnMatchedItemDescription")
                        .HasMaxLength(500);

                    b.Property<string>("UnMatchedItemReferDescription")
                        .HasMaxLength(500);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("NormalEntEvaluationUnmatchedItems");
                });

            modelBuilder.Entity("Safeway.Model.Project.ProjectBasicInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<bool>("IsValid");

                    b.Property<string>("ProjectDescription")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("ProjectEndDate");

                    b.Property<string>("ProjectMember");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ProjectOnwer");

                    b.Property<DateTime?>("ProjectStartDate");

                    b.Property<int?>("ProjectStatus");

                    b.Property<int?>("ProjectType");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("ProjectBasicInfos");
                });

            modelBuilder.Entity("Safeway.Model.SmallEntEvaluation.SmallEntEvaluationBase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("EnterpriseId")
                        .IsRequired();

                    b.Property<DateTime>("EvaluationEndDate");

                    b.Property<string>("EvaluationLeader")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EvaluationStartDate");

                    b.Property<string>("EvaluationTeamMember")
                        .HasMaxLength(500);

                    b.Property<string>("EvluationEnt")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("IsValid");

                    b.Property<string>("ModuleOne")
                        .HasMaxLength(200);

                    b.Property<string>("ModuleThree")
                        .HasMaxLength(200);

                    b.Property<string>("ModuleTwo")
                        .HasMaxLength(200);

                    b.Property<string>("Progress");

                    b.Property<string>("ProjectId");

                    b.Property<Guid?>("ReportFileId");

                    b.Property<string>("ReportLeader")
                        .HasMaxLength(200);

                    b.Property<string>("Score");

                    b.Property<int?>("Status");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("smallEntEvaluationBases");
                });

            modelBuilder.Entity("Safeway.Model.SmallEntEvaluation.SmallEntEvaluationItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualScore")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("AllMatched");

                    b.Property<string>("AssignTo")
                        .HasMaxLength(200);

                    b.Property<string>("BasicRuleRequirement")
                        .HasMaxLength(500);

                    b.Property<string>("ComplianceStandard")
                        .HasMaxLength(500);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<decimal>("DeductScore")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("EvaluationDescription");

                    b.Property<int?>("EvaluationType");

                    b.Property<bool>("IsEvaluated");

                    b.Property<Guid>("LevelFourID");

                    b.Property<int>("LevelFourOrder");

                    b.Property<string>("LevelOneElement")
                        .HasMaxLength(300);

                    b.Property<int>("LevelOneOrder");

                    b.Property<string>("LevelThreeElement")
                        .HasMaxLength(300);

                    b.Property<int>("LevelThreeOrder");

                    b.Property<string>("LevelTwoElement")
                        .HasMaxLength(300);

                    b.Property<int>("LevelTwoOrder");

                    b.Property<string>("ScoringMethod")
                        .HasMaxLength(500);

                    b.Property<string>("SmallEntEvaluationBaseId");

                    b.Property<decimal>("StandardScore")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("UnInvolved");

                    b.Property<bool>("UnMatched");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("SmallEntEvaluationItems");
                });

            modelBuilder.Entity("Safeway.Model.SmallEntEvaluation.SmallEntEvaluationUnMatchedItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<decimal>("Deduction")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal>("DeductionReference")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int?>("EvaluationType");

                    b.Property<string>("ReviewElementId");

                    b.Property<string>("SmallEntEvaluationBaseId");

                    b.Property<string>("SmallEntEvaluationItemId");

                    b.Property<string>("UnMatchedItemDescription")
                        .HasMaxLength(500);

                    b.Property<string>("UnMatchedItemReferDescription")
                        .HasMaxLength(500);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("SmallEntEvaluationUnMatchedItems");
                });

            modelBuilder.Entity("Safeway.Model.System.SysDictionaryItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChildrenCode");

                    b.Property<string>("Code");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<bool>("IsValid");

                    b.Property<string>("Name");

                    b.Property<string>("Remark");

                    b.Property<int>("Sort");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.ToTable("SysDictionaryItems");
                });

            modelBuilder.Entity("Safeway.Model.System.SysDictionaryType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<bool>("IsValid");

                    b.Property<string>("Name");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("SysDictionaryTypes");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.ActionLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionName")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ActionTime");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(250);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<double>("Duration");

                    b.Property<string>("IP")
                        .HasMaxLength(50);

                    b.Property<string>("ITCode")
                        .HasMaxLength(50);

                    b.Property<int>("LogType");

                    b.Property<string>("ModuleName")
                        .HasMaxLength(50);

                    b.Property<string>("Remark");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("ActionLogs");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.DataPrivilege", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<Guid?>("DomainId");

                    b.Property<Guid?>("GroupId");

                    b.Property<string>("RelateId");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<Guid?>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("DomainId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("DataPrivileges");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FileAttachment", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<byte[]>("FileData");

                    b.Property<string>("FileExt")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("GroupName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsTemprory");

                    b.Property<long>("Length");

                    b.Property<string>("Path");

                    b.Property<int?>("SaveFileMode");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<DateTime>("UploadTime");

                    b.HasKey("ID");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkAction", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("ModuleId");

                    b.Property<string>("Parameter")
                        .HasMaxLength(50);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("ModuleId");

                    b.ToTable("FrameworkActions");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkArea", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("FrameworkAreas");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkDomain", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("DomainAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("DomainPort");

                    b.Property<string>("EntryUrl");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("FrameworkDomains");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("GroupRemark");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("FrameworkGroups");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkMenu", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActionName");

                    b.Property<string>("ClassName");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<int?>("DisplayOrder")
                        .IsRequired();

                    b.Property<Guid?>("DomainId");

                    b.Property<bool>("FolderOnly");

                    b.Property<string>("ICon")
                        .HasMaxLength(50);

                    b.Property<bool>("IsInherit");

                    b.Property<bool?>("IsInside")
                        .IsRequired();

                    b.Property<bool>("IsPublic");

                    b.Property<string>("MethodName");

                    b.Property<string>("ModuleName");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("ParentId");

                    b.Property<bool>("ShowOnMenu");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("Url");

                    b.HasKey("ID");

                    b.HasIndex("DomainId");

                    b.HasIndex("ParentId");

                    b.ToTable("FrameworkMenus");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkModule", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AreaId");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NameSpace");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.HasIndex("AreaId");

                    b.ToTable("FrameworkModules");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("RoleRemark");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.HasKey("ID");

                    b.ToTable("FrameworkRoles");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkUserBase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("CellPhone");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(30);

                    b.Property<string>("ITCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsValid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<Guid?>("PhotoId");

                    b.Property<int?>("Sex");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<string>("ZipCode");

                    b.HasKey("ID");

                    b.HasIndex("PhotoId");

                    b.ToTable("FrameworkUsers");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkUserGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<Guid>("GroupId");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<Guid>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("FrameworkUserGroup");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkUserRole", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<Guid>("RoleId");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<Guid>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("FrameworkUserRole");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FunctionPrivilege", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Allowed")
                        .IsRequired();

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<Guid>("MenuItemId");

                    b.Property<Guid?>("RoleId");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<Guid?>("UserId");

                    b.HasKey("ID");

                    b.HasIndex("MenuItemId");

                    b.ToTable("FunctionPrivileges");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.SearchCondition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Condition");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Name");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateTime");

                    b.Property<Guid>("UserId");

                    b.Property<string>("VMName");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("SearchConditions");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.DataPrivilege", b =>
                {
                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkDomain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId");

                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkUserBase", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkAction", b =>
                {
                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkModule", "Module")
                        .WithMany("Actions")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkMenu", b =>
                {
                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkDomain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId");

                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkMenu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkModule", b =>
                {
                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkArea", "Area")
                        .WithMany("Modules")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkUserBase", b =>
                {
                    b.HasOne("WalkingTec.Mvvm.Core.FileAttachment", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId");
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkUserGroup", b =>
                {
                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkGroup", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkUserBase", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FrameworkUserRole", b =>
                {
                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkUserBase", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.FunctionPrivilege", b =>
                {
                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkMenu", "MenuItem")
                        .WithMany("Privileges")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WalkingTec.Mvvm.Core.SearchCondition", b =>
                {
                    b.HasOne("WalkingTec.Mvvm.Core.FrameworkUserBase", "User")
                        .WithMany("SearchConditions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
