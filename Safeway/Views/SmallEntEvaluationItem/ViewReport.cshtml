@model Safeway.ViewModel.SamllEntEvaluationItemVMs.SmallEntEvaluationItemVM
    <div id="reviewReport">
        <div style="margin-top: 20px">
            <el-button @@click="handleSave">保存评审数据</el-button>
            <el-button @@click="handleExport">导出评审报告</el-button>
        </div>
        <br/>
        <el-tabs type="border-card" @@tab-click="handleTabClick" v-model="defaultTab">
            <el-tab-pane v-for="(t, index) in tabList" :label="t.label" :name="t.name">
                <el-table :data="reportData" style="width: 100%" border
                          v-loading="loading"
                          element-loading-text="Loading..."
                          element-loading-spinner="el-icon-loading"
                          element-loading-background="rgba(0, 0, 0, 0.8)">
                    <el-table-column prop="LevelTwoElement"
                                     label="二级"
                                     width="100"
                                     align="center">
                    </el-table-column>
                    <el-table-column prop="LevelThreeElement"
                                     label="基本要求规范"
                                     width="250"
                                     align="center">
                    </el-table-column>
                    <el-table-column prop="ComplianceStandard"
                                     label="企业达标标准"
                                     width="320"
                                     align="left">
                    </el-table-column>
                    <el-table-column label="标准分值"
                                     width="60"
                                     align="center">
                        <template slot-scope="scope">
                            <el-tag type="warning">{{ scope.row.StandardScore}}</el-tag>
                        </template>
                    </el-table-column>
                    <el-table-column label="不符合项描述"
                                     width="350"
                                     align="center">
                        <template slot-scope="scope">
                            <el-row v-for="item in scope.row.EvaluatedUnMatchedItems">
                                <el-col :span="18">
                                    <el-input type="textarea"
                                              :rows="2"
                                              v-model="item.UnMatchedItemDescription">
                                    </el-input>
                                </el-col>
                                <el-col :span="4">
                                    <el-input style="width: 40px"
                                              @@change="calculateEvaluatedUnMatcheScore(scope.row)"
                                              v-model="item.Deduction">
                                    <el-input>
                                </el-col>
                            </el-row>
                        </template>
                    </el-table-column>
                    <el-table-column label="扣分"
                                     width="60"
                                     align="center">
                        <template slot-scope="scope">
                            <el-tag type="danger">{{ scope.row.DeductScore}}</el-tag>
                        </template>
                    </el-table-column>
                    <el-table-column label="不符合"
                                     width="400"
                                     align="left">
                        <template slot-scope="scope">
                            <el-checkbox v-for="item in scope.row.UnMatchedItems" v-model="item.IsValid" @@change="handleUnMatched(item, scope.row)">{{ item.ElementName }} - {{getEvaluationTypeStr(item.EvaluationType)}}</el-checkbox>
                        </template>
                    </el-table-column>
                    <el-table-column label="不涉及"
                                     width="60"
                                     align="center">
                        <template slot-scope="scope">
                            <el-checkbox v-model="scope.row.UnInvolved" @@change="handleUnInvolved(scope.row)"></el-checkbox>
                        </template>
                    </el-table-column>
                    <el-table-column label="实际得分"
                                     width="60"
                                     align="center">
                        <template slot-scope="scope">
                            <el-tag type="success">{{ scope.row.ActualScore}}</el-tag>
                        </template>
                    </el-table-column>
                </el-table>
            </el-tab-pane>
            @*<el-tab-pane label="设备设施" name="基础管理"></el-tab-pane>
            <el-tab-pane label="生产现场" name="基础管理"></el-tab-pane>
            <el-tab-pane label="隐患排查与治理" name="基础管理"></el-tab-pane>
            <el-tab-pane label="职业卫生" name="基础管理"></el-tab-pane>
            <el-tab-pane label="绩效评定与持续改进" name="绩效评定与持续改进"></el-tab-pane>*@
        </el-tabs>
    </div>
<script>
    var reviewReport = new Vue({
        el: '#reviewReport',
        data: {
            loading: false,
            defaultTab: '基础管理',
            tabList: [{ label: '基础管理', name: '基础管理' }, { label: '设备设施', name: '设备设施' }
                , { label: '生产现场', name: '生产现场' }, { label: '隐患排查与治理', name: '隐患排查与治理' }
                , { label: '职业卫生', name: '职业卫生' }, { label: '绩效评定与持续改进', name: '绩效评定与持续改进' }],
            reportData: [{
                LevelTwoElement: '',
                LevelThreeElement: '',
                LevelFourID: '',
                ComplianceStandard: '',
                BasicRuleRequirement: '',
                StandardScore: null,
                AssignTo: '',
                UnInvolved: false,
                ActualScore: null,
                DeductScore: null,
                EvaluationType: '',
                SmallEntEvaluationBaseId: '',
                UnMatchedItemDescription: ''
            }]
        },
        methods: {
            loadData: function () {
                this.loading = true;
                let vData = @Html.Raw(Json.Serialize(ViewData));;
                axios.get('SmallEntEvaluationItem/GetEvaluationItem?id=' + vData["ID"] + '&tab=' + this.defaultTab)
                    .then(function (r) {
                        this.reportData = r.data.Data;
                        this.loading = false;
                    }.bind(this))
                    .catch(function (e) {
                        console.error(e);
                    });
            },
            handleUnInvolved(row) {
                if (row.UnInvolved) {
                    //console.info(row.EvaluatedUnMatchedItems);
                    // description of unmatched item 
                    let evaluatedUnMatchedItem = {
                        SmallEntEvaluationItemId: row.ID,
                        UnMatchedItemReferDescription: '不涉及',
                        UnMatchedItemDescription: '不涉及',
                        DeductionReference: 0,
                        Deduction: 0,
                        SmallEntEvaluationBaseId: row.SmallEntEvaluationBaseId
                    };
                    row.EvaluatedUnMatchedItems = [];
                    row.UnMatchedItems.map(function (row) {
                        row.IsValid = false;
                    })
                    row.EvaluatedUnMatchedItems.push(evaluatedUnMatchedItem);
                }
                else {
                    row.EvaluatedUnMatchedItems = [];
                }
                this.calculateUnInvolvedScore(row);
            },
            handleUnMatched(item, row) {
                if (item.IsValid) {
                    let evaluatedUnMatchedItem = {
                        //ID: item.ID,
                        SmallEntEvaluationItemId: row.ID,
                        UnMatchedItemReferDescription: item.ElementName,
                        UnMatchedItemDescription: item.ElementName,
                        DeductionReference: item.TotalScore,
                        Deduction: item.TotalScore,
                        EvaluationType: item.EvaluationType,
                        ReviewElementId: item.ID,
                        SmallEntEvaluationBaseId: row.SmallEntEvaluationBaseId
                    };
                    row.EvaluatedUnMatchedItems.push(evaluatedUnMatchedItem);
                }
                else {
                    row.EvaluatedUnMatchedItems = row.EvaluatedUnMatchedItems.filter(function (row) {
                        return item.ID != row.ReviewElementId
                    })
                }
                this.calculateUnMatcheScore(row);
            },
            calculateUnInvolvedScore: function (item) {
                // check is uninvolve checked
                if (item.UnInvolved) {
                    item.ActualScore = 0;
                    item.DeductScore = 0;
                }
                else {
                    item.ActualScore = item.StandardScore;
                }
            },
            calculateEvaluatedUnMatcheScore(item) {
                let unMatchedScore = 0;
                item.EvaluatedUnMatchedItems.map(function (row) {
                    unMatchedScore += row.Deduction;
                })
                item.DeductScore = unMatchedScore > item.StandardScore ? item.StandardScore : unMatchedScore;
                item.ActualScore = item.StandardScore - item.DeductScore;
            },
            calculateUnMatcheScore: function (item) {
                let unMatchedScore = 0;
                item.UnMatchedItems.map(function (row) {
                    if (row.IsValid)
                        unMatchedScore += row.TotalScore;
                })
                //console.log('unMatchedScore:' + unMatchedScore);
                //console.log('StandardScore:' + item.StandardScore);
                item.DeductScore = unMatchedScore > item.StandardScore ? item.StandardScore : unMatchedScore;
                item.ActualScore = item.StandardScore - item.DeductScore;
            },
            handleTabClick(value) {
                this.loading = true;
                axios.post('SmallEntEvaluationItem/SaveEvaluationItem',this.reportData)
                .then(function (r) {
                    if (r.data.Data === true) {
                        this.$notify.success({
                            title: '提示',
                            message: '保存评审数据成功！',
                            position: 'bottom-right'
                        });
                    }
                    this.loadData();
                }.bind(this))
               
                //console.log(value.paneName);
                //console.log(value.$vnode);
            },
            handleSave() {
                this.loading = true;
                axios.post('SmallEntEvaluationItem/SaveEvaluationItem',this.reportData)
                .then(function (r) {
                    this.loading = false;
                    console.log(r);
                    if (r.data.Data === true) {
                        this.$notify.success({
                            title: '提示',
                            message: '保存评审数据成功！',
                            position: 'bottom-right'
                        });
                    }
                }.bind(this))
            },
            getEvaluationTypeStr(value) {
                if (value == 0)
                    return '文件';
                if (value == 1)
                    return '现场';
                return null;
            },
            handleExport: function ()
            {
                if (this.reportData && this.reportData.length > 0)
                {
                 axios.post('SmallEntEvaluationItem/ExportData',this.reportData)
                    .then(function (r) {
                        this.loading = false;
                        console.log(r);
                        if (r.data.Data === true) {
                            this.$notify.success({
                                title: '提示',
                                message: '导出评审数据成功！',
                                position: 'bottom-right'
                            });
                        }
                    }.bind(this))
                }

            }
        },
        created: function() {
            this.loadData();
        }
    })
</script>